@startuml Expressions
skinparam style strictuml
skinparam monochrome true


interface ASTNode {
    getLine(): int
    getColumn(): int
}

class AbstractASTNode {
    AbstractASTNode(int line, int column)
    getLine(): int
    getColumn(): int
    line: int
    column: int
}

interface Expression {

}

class AbstractExpression {
    AbstractExpression(int line, int column)
}

class IntLiteral {
    value: int
}

class CharLiteral {
    value: char
}

class DoubleLiteral {
    value: double
}

class UnaryMinus {
    expression: Expression
}

class UnaryNegative {
    expression: Expression
}

class Cast {
    typeCast: Type
    expression: Expression
}

class ArrayAccess {
    array: Expression
    index: Expression
}

class StructAccess {
    struct: Expression
    field: String
}

class Variable {
    name: String
}

class Arithmetic {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

class Logical {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

class Relational {
    operator: String
    leftExpression: Expression
    rightExpression: Expression
}

ASTNode <|.. AbstractASTNode

AbstractASTNode <|-- AbstractExpression

Expression <|.. AbstractExpression

AbstractExpression <|-- IntLiteral
AbstractExpression <|-- CharLiteral
AbstractExpression <|-- DoubleLiteral
AbstractExpression <|-- UnaryMinus
AbstractExpression <|-- UnaryNegative
AbstractExpression <|-- Cast
AbstractExpression <|-- Arithmetic
AbstractExpression <|-- ArrayAccess
AbstractExpression <|-- StructAccess
AbstractExpression <|-- Relational
AbstractExpression <|-- Variable
AbstractExpression <|-- Logical

UnaryMinus o-- "1" Expression
UnaryNegative o-- "1" Expression
StructAccess o-- "1" Expression
Cast o-- "1" Expression

ArrayAccess o-- "2" Expression
Arithmetic o-- "2" Expression
Logical o-- "2" Expression
Relational o-- "2" Expression
@enduml
